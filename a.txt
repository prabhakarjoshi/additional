Split the given array into K sub-arrays




#include <bits/stdc++.h>
using namespace std;
 
// Function to check if mid can
// be maximum sub - arrays sum
bool check(int mid, int array[], int n, int K)
{
    int count = 0;
    int sum = 0;
    for (int i = 0; i < n; i++) {
 
        // If individual element is greater
        // maximum possible sum
        if (array[i] > mid)
            return false;
 
        // Increase sum of current sub - array
        sum += array[i];
 
        // If the sum is greater than
        // mid increase count
        if (sum > mid) {
            count++;
            sum = array[i];
        }
    }
    count++;
 
    // Check condition
    if (count <= K)
        return true;
    return false;
}
 
// Function to find maximum subarray sum
// which is minimum
int solve(int array[], int n, int K)
{
    int* max = max_element(array, array + n);
    int start = *max; //Max subarray sum, considering subarray of length 1
    int end = 0;
 
    for (int i = 0; i < n; i++) {
        end += array[i]; //Max subarray sum, considering subarray of length n
    }
 
    // Answer stores possible
    // maximum sub array sum
    int answer = 0;
    while (start <= end) {
        int mid = (start + end) / 2;
 
        // If mid is possible solution
        // Put answer = mid;
        if (check(mid, array, n, K)) {
            answer = mid;
            end = mid - 1;
        }
        else {
            start = mid + 1;
        }
    }
 
    return answer;
}
 
// Driver Code
int main()
{
    int array[] = { 1, 2, 3, 4 };
    int n = sizeof(array) / sizeof(array[0]);
    int K = 3;
    cout << solve(array, n, K);
}



####

#include<bits/stdc++.h> 
#define mp make_pair 
#define pb push_back 
#define ll long long 
using namespace std;
int n,d,m,a[105],s[105],ans;
int main(){ cin>>n;
for(int i=1;i<=n;i++){ cin>>a[i]; s[i]=s[i-1]+a[i]; } 
cin>>d>>m;
for(int i=m;i<=n;i++) if(s[i]-s[i-m]==d) ans++;
cout<<ans<<endl;
return 0;
}

















@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@





#include <math.h> 
#include <stdio.h> 
#include <string.h> 
#include <stdlib.h> 
#include <assert.h> 
#include <limits.h> 
#include <stdbool.h> 
int main(){ int n;
scanf("%d",&n);
int *squares = malloc(sizeof(int) * n);
for(int squares_i = 0; squares_i < n; squares_i++)
{ scanf("%d",&squares[squares_i]); }
int d;
int m;
scanf("%d %d",&d,&m);
int count = 0;
for (int i = 0; i <= n-m; ++i)
{ int sum = 0;
for (int j = i; j < i+m; ++j)
{ sum += squares[j];
}
if (sum == d) 
++count;
}
printf("%d", count);
return 0; }



#####


int birthday(vector<int> s, int d, int m) {
 int len = s.size();
 int ways = 0;
    for(int i=1; i<len; i++)
    {
        s[i] = s[i]+s[i-1];  
    }

    if(m>len)
    {
        return 0;
    }
    else
    {
        for(int i=m-1; i<len; i++)
        {
            if(s[i]- s[i-m]== d )
            {
                ways++;
            }
        }
    }
return ways;
}
